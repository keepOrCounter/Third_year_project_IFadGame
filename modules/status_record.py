import numpy as np

class Player_status():
    def __init__(self, currentLocation:list[int,int] = [0,0], items:list[str] = [], \
        hp: int = 100, action_point: int = 100) -> None:
        """ `__currentLocation:` player coordinate [x,y]\n
            `items:` items in bag\n
            `action_point:` energy bar of player
        """
        
        self.__currentLocation = currentLocation
        self.__items = items
        self.__hp = hp
        self.__action_point = action_point
    
    def get_currentLocation(self) -> tuple[int]:
        return (self.__currentLocation[0], self.__currentLocation[1])
    
    def set_currentLocation(self, x:int, y:int) -> None:
        self.__currentLocation[0] = x
        self.__currentLocation[1] = y

    def get_items(self) -> list[str]:
        return self.__items
    
    def set_items(self, items: list[str]) -> None:
        self.__items = items

    def get_hp(self) -> int:
        return self.__hp
    
    def set_hp(self, hp: int) -> None:
        self.__hp = hp

    def get_action_point(self) -> int:
        return self.__action_point
    
    def set_action_point(self, action_point: int) -> None:
        self.__action_point = action_point

        
class Location():
    def __init__(self, location_name:str, x:int, y:int, objects:list = [], scene: list = [], \
        description: str = "") -> None:
        """`location_name:` name of current terrain\n
            `objects:` items at current place\n
            `scene:` stage set/environment description of current place\n
            `description:` description generated by GPT, only for visited places\n
            `x\y: ` locations' coordinate
        """
        self.location_name = location_name
        self.objects = objects
        self.scene = scene
        self.description = description
        self.x = x
        self.y = y
        
class Map_information():
    def __init__(self, current_area_type: int = 0, currentMap: np.ndarray[str] = [], \
        map_size: tuple[int] = (25, 25)) -> None:
        """`current_area_type:` used for generate map, 0 for sea area, 1 for land \
            area, affect the probability of different terrain\n
            `visitedPlace:` Place has visited in this form: {(x, y): "Location_object"}\n
            `map_size: ` tuple in (row, cols), height and width of map
        """
        self.__visitedPlace = {} # {(x, y): "Location_object"}
        self.__current_area_type = current_area_type
        self.__currentMap = currentMap
        self.__map_size = map_size # rows, cols = y, x

    def get_current_area_type(self) -> int:
        return self.__current_area_type

    def set_current_area_type(self, current_area_type: int):
        self.__current_area_type = current_area_type

    def get_currentMap(self) -> np.ndarray[str]:
        return self.__currentMap

    def set_currentMap(self, currentMap: np.ndarray[str]):
        self.__currentMap = currentMap

    def get_visitedPlace(self) -> dict:
        return self.__visitedPlace

    def set_visitedPlace(self, visitedPlace: dict):
        self.__visitedPlace = visitedPlace

    def get_map_size(self) -> tuple[int]:
        return self.__map_size

    def set_map_size(self, map_size: tuple[int]):
        self.__map_size = map_size
        
        
class Items:
    def __init__(self, item_name, item_energy_recovery):
        self.item_name = item_name
        self.item_energy_recovery = item_energy_recovery

class defininedSys(): # from gpt
    def __init__(self) -> None:
        self.def_items = [
            Items("Campfire", 20),
            Items("Water Source", 10),
            Items("Shelter", 30),
            Items("Food Storage", 15),
            Items("Traps", 10),
            Items("First Aid Kit", 25),
            Items("Toolkits", 15),
            Items("Maps", 5),
            Items("Edible Plants", 10),
            Items("Animal Tracks", 5),
            Items("Firewood", 10),
            Items("Rocks", 5),
            Items("Wildlife", 20),
            Items("Weather Conditions", 0),
            Items("Hidden Stashes", 15),
            Items("Footprints", 0),
            Items("Weapon Crafting Bench", 0)
        ]

